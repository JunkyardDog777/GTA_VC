## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import Modules.GTAintro;
from Modules import GTAintro
# (Line 4) const 		 Bag = UnitGroup(1000 );
Bag = _CGFW(lambda: [UnitGroup(1000)], 1)[0]
# (Line 5) const ChangeableUnits = EUDDeque(1000)();
ChangeableUnits = _CGFW(lambda: [EUDDeque(1000)()], 1)[0]
# (Line 6) var boxcount;
boxcount = EUDVariable()
# (Line 8) const array = [
# (Line 9) 64, 98, 99, 107, 99, 117, 82, 79, 81, 79, 81, 90, 81, 99, 81, 109,
# (Line 10) 81, 114, 82, 94, 82, 110, 117, 81, 116, 84, 116, 99, 117, 97, 117, 109,
# (Line 11) 116, 110, 152, 78, 150, 79, 150, 92, 152, 92, 152, 107, 150, 107, 168, 91,
# (Line 12) 168, 98, 168, 107, 187, 82, 185, 83, 185, 95, 187, 95, 187, 107, 185, 107,
# (Line 13) 203, 91, 203, 97, 92, 152, 92, 156, 127, 149, 127, 160, 127, 169, 177, 140,
# (Line 14) 177, 148, 177, 154, 177, 164, 177, 170, 211, 138, 211, 152, 213, 152, 230, 152,
# (Line 15) 230, 156, 144, 139, 144, 147, 144, 154, 144, 163, 144, 167, 110, 138, 109, 143,
# (Line 16) 110, 151, 109, 159, 110, 164, 102, 188, 100, 190, 100, 202, 102, 203, 102, 216,
# (Line 17) 100, 216, 135, 189, 136, 202, 138, 203, 135, 203, 135, 216, 137, 216, 138, 216,
# (Line 18) 118, 189, 118, 196, 118, 206, 155, 203, 155, 207, 173, 189, 172, 191, 173, 203,
# (Line 19) 172, 204, 172, 215, 173, 215, 190, 201, 190, 207, 89, 135, 95, 135, 134, 135,
# (Line 20) 148, 135, 162, 135, 176, 135, 190, 135, 204, 135, 215, 135, 209, 175, 202, 175,
# (Line 21) 202, 187, 209, 187, 239, 99, 28, 100, 28, 69, 212, 27, 228, 42, 255, 131,
# (Line 22) 59, 38, 91, 38, 123, 38, 155, 38, 183, 38, 51, 128, 55, 142, 46, 170,
# (Line 23) 46, 192, 215, 173, 215, 193, 228, 97, 228, 65, 255, 163, 234, 173, 73, 223,
# (Line 24) 105, 223, 137, 223, 168, 223, 200, 223, 154, 142, 89, 128, 91, 128, 93, 128,
# (Line 25) 95, 128, 97, 128, 99, 128, 101, 128, 155, 124, 155, 125, 155, 126, 155, 127,
# (Line 26) 155, 128, 155, 141, 155, 142, 155, 143, 155, 144, 157, 141, 159, 141, 160, 141,
# (Line 27) 162, 141, 163, 141, 164, 141, 166, 141, 167, 141, 168, 141, 154, 145, 154, 144,
# (Line 28) 151, 178, 153, 178, 155, 178, 156, 178, 158, 178, 159, 178, 160, 178, 162, 178,
# (Line 29) 164, 178, 208, 152, 209, 154, 210, 155, 211, 156, 212, 157, 210, 156, 209, 157,
# (Line 30) 240, 155, 239, 156, 237, 156, 236, 157, 239, 157, 134, 204, 135, 205, 136, 206,
# (Line 31) 137, 206, 128, 204, 127, 205, 126, 206, 125, 207, 166, 203, 165, 204, 164, 205,
# (Line 32) 163, 206, 163, 207, 168, 204, 169, 205, 170, 206, 171, 207, 97, 205, 99, 206,
# (Line 33) 98, 206, 78, 192, 78, 193, 78, 194, 78, 195, 78, 176, 78, 177, 78, 178,
# (Line 34) 77, 178, 76, 178, 75, 178, 74, 178, 73, 178, 72, 178, 70, 178, 69, 178,
# (Line 35) 68, 178, 67, 178, 66, 178, 65, 178, 64, 178, 63, 178, 66, 179, 64, 180,
# (Line 36) 64, 181, 63, 182, 63, 180, 97, 206, 96, 207, 95, 207, 93, 66, 93, 67,
# (Line 37) 93, 68, 93, 69, 128, 83, 127, 84, 128, 85, 127, 86, 127, 66, 127, 67,
# (Line 38) 127, 68, 127, 69, 125, 69, 123, 69, 122, 69, 120, 69, 119, 69, 117, 69,
# (Line 39) 115, 69, 114, 69, 116, 70, 114, 71, 113, 72, 113, 70, 58, 99, 56, 99,
# (Line 40) 54, 99, 52, 99, 50, 99, 49, 99, 59, 99, 48, 99, 47, 99, 46, 99,
# (Line 41) 45, 99, 46, 98, 45, 97, 74, 108, 73, 109, 73, 110, 72, 110, 71, 111,
# (Line 42) 70, 112, 69, 112, 68, 112, 69, 114, 70, 114, 68, 113, 67, 114, 155, 144,
# (Line 43) 192, 125, 190, 125, 193, 125, 195, 125, 197, 125, 199, 125, 200, 125, 202, 125,
# (Line 44) 188, 125, 203, 125, 227, 128, 228, 128, 230, 128, 231, 128, 232, 128, 234, 128,
# (Line 45) 235, 128, 236, 128, 238, 128, 208, 113, 208, 114, 173, 115, 174, 114, 175, 113,
# (Line 46) 175, 112, 170, 115, 169, 114, 167, 113, 169, 113, 172, 113, 172, 112, 170, 112,
# (Line 47) 140, 115, 141, 114, 142, 113, 140, 113, 138, 113, 135, 113, 134, 113, 136, 113,
# (Line 48) 137, 114, 143, 112, 113, 96, 114, 97, 116, 98, 118, 99, 114, 99, 117, 99,
# (Line 49) 115, 99, 113, 98, 182, 95, 183, 96, 184, 97, 185, 98, 182, 97, 180, 98,
# (Line 50) 74, 112, 73, 111, 115, 54, 114, 55, 113, 56, 113, 55, 111, 55, 110, 55,
# (Line 51) 109, 54, 108, 54, 106, 54, 108, 55, 109, 57, 143, 55, 142, 55, 141, 54,
# (Line 52) 163, 55, 164, 55, 176, 54, 177, 55, 178, 56, 178, 57, 185, 54, 184, 54,
# (Line 53) 183, 55, 182, 56, 182, 55, 181, 55, 179, 55, 180, 57, 179, 54, 94, 109,
# (Line 54) 96, 110, 98, 111, 100, 112, 102, 112, 57, 179, 36, 70, 131, 230, 167, 230,
# (Line 55) 206, 182,
# (Line 58) 70,165, 75,165, 83,165, 88,165, 149,165, 161,165, 93,165, 98,165, 101,165,
# (Line 59) 107,165, 112,165, 117,165, 123,165, 128,165, 134,165, 139,165, 144,165,
# (Line 60) 155,165, 166,165, 170,165, 176,165, 181,165, 184,165, 188,165,
# (Line 63) 158,151, 157,151, 157,151,
# (Line 66) 57,180, 132,229, 167,230, 201,180, 203,228, 205,126, 167,127, 134,127, 40,71,
# (Line 69) 94,165, 93,164, 92,163, 132,165, 133,165, 133,164, 132,165, 133,165, 133,164,
# (Line 70) 132,164, 171,163, 170,164, 168,164, 173,163, 211,114, 211,113, 211,112,
# (Line 71) 113,95, 115,96, 117,98, 118,98, 112,99, 115,99, 117,99, 112,99, 115,99,
# (Line 72) 117,99, 119,99, 116,98, 115,98, 113,99, 113,97, 113,96, 115,96, 119,97,
# (Line 73) 134,113, 136,115, 135,114, 104,111, 103,111, 102,111, 101,111, 100,111,
# (Line 74) 99,111, 99,111, 98,111, 97,111, 96,111, 95,111, 97,110, 95,109, 95,109,
# (Line 75) 102,113, 101,113, 100,113, 99,113, 97,113, 96,113, 95,113, 94,113, 93,113,
# (Line 76) 92,113, 91,113, 90,113, 89,113, 88,113, 87,113, 86,113, 86,113, 86,112,
# (Line 77) 87,112, 88,112, 89,112, 91,112, 92,112, 94,112, 73,156, 71,154, 101,156,
# (Line 78) 103,155, 142,156, 141,155, 140,153, 170,154, 169,156, 171,154, 170,155,
# (Line 79) 169,156, 167,156, 140,154, 142,156, 140,156, 139,154, 139,155, 139,156,
# (Line 80) 103,155, 102,156, 100,156, 98,156, 73,156, 72,155, 102,151, 102,152,
# (Line 81) 102,153, 102,153, 102,152, 102,153, 102,153, 100,154, 103,149, 162,54,
# (Line 82) 163,54, 178,55, 177,54, 179,57, 184,54, 183,55, 182,57, 184,54, 183,54,
# (Line 83) 183,55, 180,54, 186,54, 182,95, 182,97,
# (Line 86) 211,135, 213,152, 211,136, 212,157, 110,136, 110,168, 127,171, 127,164,
# (Line 87) 127,150, 144,139, 177,140, 102,220, 101,209, 101,200, 101,194, 101,187,
# (Line 88) 101,185, 118,187, 118,188, 118,194, 118,187, 118,188, 118,194, 118,198,
# (Line 89) 118,205, 137,203, 137,214, 172,218, 172,209, 190,207, 190,201, 64,90,
# (Line 90) 64,90, 64,90, 65,97, 64,97, 169,90, 168,109, 185,98, 186,85, 186,79,
# (Line 91) 186,77, 186,111, 135,188, 99,107, 151,111, 151,97, 150,78, 150,84,
# (Line 92) 150,93, 149,114,
# (Line 98) 110,40, 110,40, 111,40, 110,40, 111,40,
# (Line 100) 55,66, 68,66, 86,66, 100,66 ,
# (Line 101) 119,67, 130,67, 139,67, 156,67 ,
# (Line 102) 169,68, 204,54, 188,65, 207,77 ,
# (Line 103) 205,90, 190,87, 171,88, 151,86 ,
# (Line 104) 132,87, 115,87, 53,104, 74,112 ,
# (Line 105) 101,106, 124,112, 93,125, 74,136 ,
# (Line 106) 82,148, 101,146, 115,127, 122,149 ,
# (Line 107) 137,130, 145,149, 166,149, 151,121 ,
# (Line 108) 159,126, 193,121, 179,122, 181,143 ,
# (Line 109) 202,128, 221,123, 232,125, 174,165 ,
# (Line 110) 197,182, 176,182, 177,200, 191,200 ,
# (Line 111) 155,197, 153,174, 136,169, 135,193 ,
# (Line 112) 119,168, 119,186, 138,209, 112,204 ,
# (Line 113) 100,192, 101,171, 80,171, 67,175 ,
# (Line 114) 67,197, 85,192, 86,201 ,
# (Line 115) 52,85,74,89,94,89,229,146,211,147,192,165
# (Line 117) ];
array = _CGFW(lambda: [_ARR(FlattenList([64, 98, 99, 107, 99, 117, 82, 79, 81, 79, 81, 90, 81, 99, 81, 109, 81, 114, 82, 94, 82, 110, 117, 81, 116, 84, 116, 99, 117, 97, 117, 109, 116, 110, 152, 78, 150, 79, 150, 92, 152, 92, 152, 107, 150, 107, 168, 91, 168, 98, 168, 107, 187, 82, 185, 83, 185, 95, 187, 95, 187, 107, 185, 107, 203, 91, 203, 97, 92, 152, 92, 156, 127, 149, 127, 160, 127, 169, 177, 140, 177, 148, 177, 154, 177, 164, 177, 170, 211, 138, 211, 152, 213, 152, 230, 152, 230, 156, 144, 139, 144, 147, 144, 154, 144, 163, 144, 167, 110, 138, 109, 143, 110, 151, 109, 159, 110, 164, 102, 188, 100, 190, 100, 202, 102, 203, 102, 216, 100, 216, 135, 189, 136, 202, 138, 203, 135, 203, 135, 216, 137, 216, 138, 216, 118, 189, 118, 196, 118, 206, 155, 203, 155, 207, 173, 189, 172, 191, 173, 203, 172, 204, 172, 215, 173, 215, 190, 201, 190, 207, 89, 135, 95, 135, 134, 135, 148, 135, 162, 135, 176, 135, 190, 135, 204, 135, 215, 135, 209, 175, 202, 175, 202, 187, 209, 187, 239, 99, 28, 100, 28, 69, 212, 27, 228, 42, 255, 131, 59, 38, 91, 38, 123, 38, 155, 38, 183, 38, 51, 128, 55, 142, 46, 170, 46, 192, 215, 173, 215, 193, 228, 97, 228, 65, 255, 163, 234, 173, 73, 223, 105, 223, 137, 223, 168, 223, 200, 223, 154, 142, 89, 128, 91, 128, 93, 128, 95, 128, 97, 128, 99, 128, 101, 128, 155, 124, 155, 125, 155, 126, 155, 127, 155, 128, 155, 141, 155, 142, 155, 143, 155, 144, 157, 141, 159, 141, 160, 141, 162, 141, 163, 141, 164, 141, 166, 141, 167, 141, 168, 141, 154, 145, 154, 144, 151, 178, 153, 178, 155, 178, 156, 178, 158, 178, 159, 178, 160, 178, 162, 178, 164, 178, 208, 152, 209, 154, 210, 155, 211, 156, 212, 157, 210, 156, 209, 157, 240, 155, 239, 156, 237, 156, 236, 157, 239, 157, 134, 204, 135, 205, 136, 206, 137, 206, 128, 204, 127, 205, 126, 206, 125, 207, 166, 203, 165, 204, 164, 205, 163, 206, 163, 207, 168, 204, 169, 205, 170, 206, 171, 207, 97, 205, 99, 206, 98, 206, 78, 192, 78, 193, 78, 194, 78, 195, 78, 176, 78, 177, 78, 178, 77, 178, 76, 178, 75, 178, 74, 178, 73, 178, 72, 178, 70, 178, 69, 178, 68, 178, 67, 178, 66, 178, 65, 178, 64, 178, 63, 178, 66, 179, 64, 180, 64, 181, 63, 182, 63, 180, 97, 206, 96, 207, 95, 207, 93, 66, 93, 67, 93, 68, 93, 69, 128, 83, 127, 84, 128, 85, 127, 86, 127, 66, 127, 67, 127, 68, 127, 69, 125, 69, 123, 69, 122, 69, 120, 69, 119, 69, 117, 69, 115, 69, 114, 69, 116, 70, 114, 71, 113, 72, 113, 70, 58, 99, 56, 99, 54, 99, 52, 99, 50, 99, 49, 99, 59, 99, 48, 99, 47, 99, 46, 99, 45, 99, 46, 98, 45, 97, 74, 108, 73, 109, 73, 110, 72, 110, 71, 111, 70, 112, 69, 112, 68, 112, 69, 114, 70, 114, 68, 113, 67, 114, 155, 144, 192, 125, 190, 125, 193, 125, 195, 125, 197, 125, 199, 125, 200, 125, 202, 125, 188, 125, 203, 125, 227, 128, 228, 128, 230, 128, 231, 128, 232, 128, 234, 128, 235, 128, 236, 128, 238, 128, 208, 113, 208, 114, 173, 115, 174, 114, 175, 113, 175, 112, 170, 115, 169, 114, 167, 113, 169, 113, 172, 113, 172, 112, 170, 112, 140, 115, 141, 114, 142, 113, 140, 113, 138, 113, 135, 113, 134, 113, 136, 113, 137, 114, 143, 112, 113, 96, 114, 97, 116, 98, 118, 99, 114, 99, 117, 99, 115, 99, 113, 98, 182, 95, 183, 96, 184, 97, 185, 98, 182, 97, 180, 98, 74, 112, 73, 111, 115, 54, 114, 55, 113, 56, 113, 55, 111, 55, 110, 55, 109, 54, 108, 54, 106, 54, 108, 55, 109, 57, 143, 55, 142, 55, 141, 54, 163, 55, 164, 55, 176, 54, 177, 55, 178, 56, 178, 57, 185, 54, 184, 54, 183, 55, 182, 56, 182, 55, 181, 55, 179, 55, 180, 57, 179, 54, 94, 109, 96, 110, 98, 111, 100, 112, 102, 112, 57, 179, 36, 70, 131, 230, 167, 230, 206, 182, 70, 165, 75, 165, 83, 165, 88, 165, 149, 165, 161, 165, 93, 165, 98, 165, 101, 165, 107, 165, 112, 165, 117, 165, 123, 165, 128, 165, 134, 165, 139, 165, 144, 165, 155, 165, 166, 165, 170, 165, 176, 165, 181, 165, 184, 165, 188, 165, 158, 151, 157, 151, 157, 151, 57, 180, 132, 229, 167, 230, 201, 180, 203, 228, 205, 126, 167, 127, 134, 127, 40, 71, 94, 165, 93, 164, 92, 163, 132, 165, 133, 165, 133, 164, 132, 165, 133, 165, 133, 164, 132, 164, 171, 163, 170, 164, 168, 164, 173, 163, 211, 114, 211, 113, 211, 112, 113, 95, 115, 96, 117, 98, 118, 98, 112, 99, 115, 99, 117, 99, 112, 99, 115, 99, 117, 99, 119, 99, 116, 98, 115, 98, 113, 99, 113, 97, 113, 96, 115, 96, 119, 97, 134, 113, 136, 115, 135, 114, 104, 111, 103, 111, 102, 111, 101, 111, 100, 111, 99, 111, 99, 111, 98, 111, 97, 111, 96, 111, 95, 111, 97, 110, 95, 109, 95, 109, 102, 113, 101, 113, 100, 113, 99, 113, 97, 113, 96, 113, 95, 113, 94, 113, 93, 113, 92, 113, 91, 113, 90, 113, 89, 113, 88, 113, 87, 113, 86, 113, 86, 113, 86, 112, 87, 112, 88, 112, 89, 112, 91, 112, 92, 112, 94, 112, 73, 156, 71, 154, 101, 156, 103, 155, 142, 156, 141, 155, 140, 153, 170, 154, 169, 156, 171, 154, 170, 155, 169, 156, 167, 156, 140, 154, 142, 156, 140, 156, 139, 154, 139, 155, 139, 156, 103, 155, 102, 156, 100, 156, 98, 156, 73, 156, 72, 155, 102, 151, 102, 152, 102, 153, 102, 153, 102, 152, 102, 153, 102, 153, 100, 154, 103, 149, 162, 54, 163, 54, 178, 55, 177, 54, 179, 57, 184, 54, 183, 55, 182, 57, 184, 54, 183, 54, 183, 55, 180, 54, 186, 54, 182, 95, 182, 97, 211, 135, 213, 152, 211, 136, 212, 157, 110, 136, 110, 168, 127, 171, 127, 164, 127, 150, 144, 139, 177, 140, 102, 220, 101, 209, 101, 200, 101, 194, 101, 187, 101, 185, 118, 187, 118, 188, 118, 194, 118, 187, 118, 188, 118, 194, 118, 198, 118, 205, 137, 203, 137, 214, 172, 218, 172, 209, 190, 207, 190, 201, 64, 90, 64, 90, 64, 90, 65, 97, 64, 97, 169, 90, 168, 109, 185, 98, 186, 85, 186, 79, 186, 77, 186, 111, 135, 188, 99, 107, 151, 111, 151, 97, 150, 78, 150, 84, 150, 93, 149, 114, 110, 40, 110, 40, 111, 40, 110, 40, 111, 40, 55, 66, 68, 66, 86, 66, 100, 66, 119, 67, 130, 67, 139, 67, 156, 67, 169, 68, 204, 54, 188, 65, 207, 77, 205, 90, 190, 87, 171, 88, 151, 86, 132, 87, 115, 87, 53, 104, 74, 112, 101, 106, 124, 112, 93, 125, 74, 136, 82, 148, 101, 146, 115, 127, 122, 149, 137, 130, 145, 149, 166, 149, 151, 121, 159, 126, 193, 121, 179, 122, 181, 143, 202, 128, 221, 123, 232, 125, 174, 165, 197, 182, 176, 182, 177, 200, 191, 200, 155, 197, 153, 174, 136, 169, 135, 193, 119, 168, 119, 186, 138, 209, 112, 204, 100, 192, 101, 171, 80, 171, 67, 175, 67, 197, 85, 192, 86, 201, 52, 85, 74, 89, 94, 89, 229, 146, 211, 147, 192, 165]))], 1)[0]
# (Line 118) const Cx,Cy = getlocTL(7);
Cx, Cy = List2Assignable(_CGFW(lambda: [f_getlocTL(7)], 2))
# (Line 119) var d;
d = EUDVariable()
# (Line 122) function DrawGTA(){
@EUDFunc
def DrawGTA():
    # (Line 127) once{wwrite(0x66EC48 +828 * 4,  223);wwrite(0x666160 + 515 * 2,  828); }
    _t1 = EUDExecuteOnce()
    if _t1():
        f_wwrite(0x66EC48 + 828 * 4, 223)
        f_wwrite(0x666160 + 515 * 2, 828)
        # (Line 128) if(d<=1302){d+=2;}
    EUDEndExecuteOnce()
    if EUDIf()(d <= 1302):
        d.__iadd__(2)
        # (Line 130) if(d==170){wwrite(0x66EC48 +877 * 4,  223); wwrite(0x669E28 + 877 * 1, 0); wwrite(0x666160 + 515 * 2,  877); }
    EUDEndIf()
    if EUDIf()(d == 170):
        f_wwrite(0x66EC48 + 877 * 4, 223)
        f_wwrite(0x669E28 + 877 * 1, 0)
        f_wwrite(0x666160 + 515 * 2, 877)
        # (Line 131) if(d ==196){wwrite(0x66EC48 +875 * 4,  223); wwrite(0x669E28 + 875 * 1, 0);wwrite(0x666160 + 515 * 2,  875);  }
    EUDEndIf()
    if EUDIf()(d == 196):
        f_wwrite(0x66EC48 + 875 * 4, 223)
        f_wwrite(0x669E28 + 875 * 1, 0)
        f_wwrite(0x666160 + 515 * 2, 875)
        # (Line 132) if(d ==248){wwrite(0x66EC48 +233 * 4,  223); wwrite(0x669E28 + 233 * 1, 10);wwrite(0x666160 + 515 * 2,  233);  }
    EUDEndIf()
    if EUDIf()(d == 248):
        f_wwrite(0x66EC48 + 233 * 4, 223)
        f_wwrite(0x669E28 + 233 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 233)
        # (Line 135) if(d ==728){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);   }
    EUDEndIf()
    if EUDIf()(d == 728):
        f_wwrite(0x66EC48 + 901 * 4, 223)
        f_wwrite(0x669E28 + 901 * 1, 0)
        f_wwrite(0x666160 + 515 * 2, 901)
        # (Line 138) if(d ==738){wwrite(0x66EC48 +507 * 4,  223); wwrite(0x669E28 + 507 * 1, 10);wwrite(0x666160 + 515 * 2,  507); SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 8, 0xFF);}
    EUDEndIf()
    if EUDIf()(d == 738):
        f_wwrite(0x66EC48 + 507 * 4, 223)
        f_wwrite(0x669E28 + 507 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 507)
        DoActions(SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 8, 0xFF))
        # (Line 140) if(d ==786){wwrite(0x66EC48 +412 * 4,  223); wwrite(0x669E28 + 412 * 1, 10);wwrite(0x666160 + 515 * 2,  412); SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 0, 0xFF);}
    EUDEndIf()
    if EUDIf()(d == 786):
        f_wwrite(0x66EC48 + 412 * 4, 223)
        f_wwrite(0x669E28 + 412 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 412)
        DoActions(SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 0, 0xFF))
        # (Line 141) if(d==792){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);}
    EUDEndIf()
    if EUDIf()(d == 792):
        f_wwrite(0x66EC48 + 901 * 4, 223)
        f_wwrite(0x669E28 + 901 * 1, 0)
        f_wwrite(0x666160 + 515 * 2, 901)
        # (Line 142) if(d ==810){wwrite(0x66EC48 +233 * 4,  223); wwrite(0x669E28 + 233 * 1, 10);wwrite(0x666160 + 515 * 2,  233);   }
    EUDEndIf()
    if EUDIf()(d == 810):
        f_wwrite(0x66EC48 + 233 * 4, 223)
        f_wwrite(0x669E28 + 233 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 233)
        # (Line 143) if(d==1060){wwrite(0x66EC48 +828 * 4,  223); wwrite(0x669E28 + 828 * 1, 10);wwrite(0x666160 + 515 * 2,  828); }
    EUDEndIf()
    if EUDIf()(d == 1060):
        f_wwrite(0x66EC48 + 828 * 4, 223)
        f_wwrite(0x669E28 + 828 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 828)
        # (Line 144) if(d ==1162){wwrite(0x66EC48 +414 * 4,  223); wwrite(0x669E28 + 414 * 1, 10); wwrite(0x666160 + 515 * 2,  414); }
    EUDEndIf()
    if EUDIf()(d == 1162):
        f_wwrite(0x66EC48 + 414 * 4, 223)
        f_wwrite(0x669E28 + 414 * 1, 10)
        f_wwrite(0x666160 + 515 * 2, 414)
        # (Line 145) if(d ==1172){wwrite(0x66EC48 +503 * 4,  223);  wwrite(0x666160 + 515 * 2,  503); wwrite(0x66D4D8 + 503 * 1,  0);}
    EUDEndIf()
    if EUDIf()(d == 1172):
        f_wwrite(0x66EC48 + 503 * 4, 223)
        f_wwrite(0x666160 + 515 * 2, 503)
        f_wwrite(0x66D4D8 + 503 * 1, 0)
        # (Line 149) if(d<1302){	setloc(20,200+ array[d],200+ array[d+1]);	CreateUnit(1,96,20,7);}
    EUDEndIf()
    if EUDIf()(d >= 1302, neg=True):
        f_setloc(20, 200 + array[d], 200 + array[d + 1])
        DoActions(CreateUnit(1, 96, 20, 7))
        # (Line 150) foreach(unit: EUDLoopNewCUnit ()){
    EUDEndIf()
    for unit in EUDLoopNewCUnit():
        # (Line 152) if(unit.unknown0x86<1 && unit.unitType==96){
        if EUDIf()(EUDSCAnd()(_ATTC(unit, 'unknown0x86') >= 1, neg=True)(_ATTC(unit, 'unitType') == 96)()):
            # (Line 153) unit.remove_collision();
            unit.remove_collision()
            # (Line 154) boxcount+=2;
            boxcount.__iadd__(2)
            # (Line 155) unit.unknown0x8C =boxcount;
            _ATTW(unit, 'unknown0x8C') << (boxcount)
            # (Line 156) unit.unknown0x86=1;}
            _ATTW(unit, 'unknown0x86') << (1)
            # (Line 158) if(unit.unknown0x86 ){
        EUDEndIf()
        if EUDIf()(unit.unknown0x86):
            # (Line 160) Bag.add(unit);
            Bag.add(unit)
            # (Line 161) }
            # (Line 162) }
        EUDEndIf()
        # (Line 164) foreach(BagE: Bag.cploop) {

    for BagE in Bag.cploop:
        # (Line 165) foreach(dead: BagE.dying) {}	// Existence check: living units continue to execute code, dead units continue
        for dead in BagE.dying:
            # (Line 166) BagE.move_cp(0x64/4);
            pass

        BagE.move_cp(0x64 // 4)
        # (Line 167) if(DeathsX(CurrentPlayer, Exactly, $U("Zerg Larva"), 0, 0xFFFF)
        _t17 = EUDIf()
        # (Line 168) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Egg"), 0, 0xFFFF)
        # (Line 169) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Drone"), 0, 0xFFFF)
        # (Line 170) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Hydralisk"), 0, 0xFFFF)
        # (Line 171) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Lurker Egg"), 0, 0xFFFF)
        # (Line 172) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Mutalisk"), 0, 0xFFFF)
        # (Line 173) || DeathsX(CurrentPlayer, Exactly, $U("Mutalisk Cocoon"), 0, 0xFFFF)
        # (Line 174) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Hatchery"), 0, 0xFFFF)
        # (Line 175) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Lair"), 0, 0xFFFF)
        # (Line 176) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Creep Colony"), 0, 0xFFFF)
        # (Line 177) || DeathsX(CurrentPlayer, Exactly, $U("Zerg Spire"), 0, 0xFFFF)
        # (Line 178) || DeathsX(CurrentPlayer, Exactly, $U("Protoss High Templar"), 0, 0xFFFF)
        # (Line 179) || DeathsX(CurrentPlayer, Exactly, $U("Protoss Dark Templar (Unit)"), 0, 0xFFFF)
        # (Line 180) ) {
        if _t17(EUDSCOr()(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Larva"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Egg"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Drone"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Hydralisk"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Lurker Egg"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Mutalisk"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Mutalisk Cocoon"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Hatchery"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Lair"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Creep Colony"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Zerg Spire"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Protoss High Templar"), 0, 0xFFFF))(DeathsX(CurrentPlayer, Exactly, EncodeUnit("Protoss Dark Templar (Unit)"), 0, 0xFFFF))()):
            # (Line 181) const uid = wread_cp(0, 0);
            uid = f_wread_cp(0, 0)
            # (Line 182) ChangeableUnits.append(uid);
            ChangeableUnits.append(uid)
            # (Line 183) ChangeableUnits.append(BagE.epd);
            ChangeableUnits.append(BagE.epd)
            # (Line 184) }
            # (Line 186) const Bagg = CUnit(BagE.epd);
        EUDEndIf()
        Bagg = CUnit(BagE.epd)
        # (Line 189) if( Bagg.unknown0x86==0){ Bagg.unknown0x86=1; }
        if EUDIf()(_ATTC(Bagg, 'unknown0x86') == 0):
            _ATTW(Bagg, 'unknown0x86') << (1)
            # (Line 190) if( Bagg.unknown0x86==1 ){Bagg.unknown0x86=2;   }
        EUDEndIf()
        if EUDIf()(_ATTC(Bagg, 'unknown0x86') == 1):
            _ATTW(Bagg, 'unknown0x86') << (2)
            # (Line 192) Bagg.order= 6;
        EUDEndIf()
        _ATTW(Bagg, 'order') << (6)
        # (Line 193) Bagg.movementState= 13;
        _ATTW(Bagg, 'movementState') << (13)
        # (Line 195) if(Bagg.unknown0x8C==Bagg.unknown0x8C){
        if EUDIf()(_ATTC(Bagg, 'unknown0x8C') == Bagg.unknown0x8C):
            # (Line 196) Bagg.posX = (GTAintro.camX-135)+array[Bagg.unknown0x8C];
            _ATTW(Bagg, 'posX') << ((GTAintro.camX - 135) + array[Bagg.unknown0x8C])
            # (Line 197) Bagg.posY = (GTAintro.camY-125)+  array[Bagg.unknown0x8C+1];
            _ATTW(Bagg, 'posY') << ((GTAintro.camY - 125) + array[Bagg.unknown0x8C + 1])
            # (Line 198) }
            # (Line 203) if(boxcount==999){  BagE.remove(); }	//This code is necessary!!!Don't skip it
        EUDEndIf()
        if EUDIf()(boxcount == 999):
            BagE.remove()
            # (Line 204) }
        EUDEndIf()
        # (Line 207) return(d);

    EUDReturn((d))
    # (Line 212) }
