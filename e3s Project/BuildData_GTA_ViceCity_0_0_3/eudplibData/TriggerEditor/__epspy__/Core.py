## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) const displaytext = StringBuffer();
displaytext = _CGFW(lambda: [StringBuffer()], 1)[0]
# (Line 3) const 	       dot = EUDArray(3);
dot = _CGFW(lambda: [EUDArray(3)], 1)[0]
# (Line 4) const 	Loading = EUDArray(6);
Loading = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 5) const playerHeat = EUDArray(6);
playerHeat = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 9) function TextRefresh(player) {
@EUDFunc
def TextRefresh(player):
    # (Line 10) displaytext.printfAt(0,"     ");
    displaytext.printfAt(0, "     ")
    # (Line 11) displaytext.printfAt(1,"     ");
    displaytext.printfAt(1, "     ")
    # (Line 12) displaytext.printfAt(2,"     ");
    displaytext.printfAt(2, "     ")
    # (Line 13) displaytext.printfAt(3,"     ");
    displaytext.printfAt(3, "     ")
    # (Line 14) displaytext.printfAt(4,"     ");
    displaytext.printfAt(4, "     ")
    # (Line 15) displaytext.printfAt(5,"     ");
    displaytext.printfAt(5, "     ")
    # (Line 16) displaytext.printfAt(6,"     ");
    displaytext.printfAt(6, "     ")
    # (Line 17) displaytext.printfAt(7,"     ");
    displaytext.printfAt(7, "     ")
    # (Line 18) displaytext.printfAt(8,"     ");
    displaytext.printfAt(8, "     ")
    # (Line 19) displaytext.printfAt(9,"     ");
    displaytext.printfAt(9, "     ")
    # (Line 20) displaytext.printfAt(10,"   ");
    displaytext.printfAt(10, "   ")
    # (Line 22) }
    # (Line 23) function eTextRefresh(player) {

@EUDFunc
def f_eTextRefresh(player):
    # (Line 24) eprintf("");
    f_eprintf("")
    # (Line 26) }
    # (Line 28) function displayWantedLevel(player){

@EUDFunc
def f_displayWantedLevel(player):
    # (Line 29) setcurpl(player);
    f_setcurpl(player)
    # (Line 30) if(playerHeat[player]>5990){
    if EUDIf()(_ARRC(playerHeat, player) <= 5990, neg=True):
        # (Line 31) printAt(2,"\x12\x04★★★★★★    ");
        f_printAt(2, "\x12\x04★★★★★★    ")
        # (Line 32) return;
        EUDReturn()
        # (Line 33) }else if(playerHeat[player]>4990){
    if EUDElseIf()(_ARRC(playerHeat, player) <= 4990, neg=True):
        # (Line 34) printAt(2,"\x12\x04★★★★★    ");
        f_printAt(2, "\x12\x04★★★★★    ")
        # (Line 35) return;
        EUDReturn()
        # (Line 36) }else if(playerHeat[player]>3990){
    if EUDElseIf()(_ARRC(playerHeat, player) <= 3990, neg=True):
        # (Line 37) printAt(2,"\x12\x04★★★★    ");
        f_printAt(2, "\x12\x04★★★★    ")
        # (Line 38) return;
        EUDReturn()
        # (Line 39) }else if(playerHeat[player]>2990){
    if EUDElseIf()(_ARRC(playerHeat, player) <= 2990, neg=True):
        # (Line 40) printAt(2,"\x12\x04★★★    ");
        f_printAt(2, "\x12\x04★★★    ")
        # (Line 41) return;
        EUDReturn()
        # (Line 42) }else if(playerHeat[player]>1990){
    if EUDElseIf()(_ARRC(playerHeat, player) <= 1990, neg=True):
        # (Line 43) printAt(2,"\x12\x04★★    ");
        f_printAt(2, "\x12\x04★★    ")
        # (Line 44) return;
        EUDReturn()
        # (Line 45) }else if(playerHeat[player]>990){
    if EUDElseIf()(_ARRC(playerHeat, player) <= 990, neg=True):
        # (Line 46) printAt(2,"\x12\x04★    ");
        f_printAt(2, "\x12\x04★    ")
        # (Line 47) return;
        EUDReturn()
        # (Line 48) }else if(playerHeat[player]<991){
    if EUDElseIf()(_ARRC(playerHeat, player) >= 991, neg=True):
        # (Line 49) printAt(2,"\x12    ");
        f_printAt(2, "\x12    ")
        # (Line 50) }
        # (Line 51) }
    EUDEndIf()
    # (Line 53) function LoadingScreen(player, percent){

@EUDFunc
def LoadingScreen(player, percent):
    # (Line 55) Loading[player] ++;
    _ARRW(Loading, player).__iadd__(1)
    # (Line 56) setcurpl(player);
    f_setcurpl(player)
    # (Line 57) for(var i=0; i<3;i++){
    i = _TYLV([None], [0])
    if EUDWhile()(i >= 3, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 58) if(Loading[player]%20 == 5+(i*5)  ){
        if EUDIf()(Loading[player] % 20 == 5 + (i * 5)):
            # (Line 59) dot[i] = 1200;}
            _ARRW(dot, i) << (1200)
            # (Line 60) else if(Loading[player]%20 == 1){
        if EUDElseIf()(Loading[player] % 20 == 1):
            # (Line 61) dot[i] = 1201;}
            _ARRW(dot, i) << (1201)
            # (Line 62) }
        EUDEndIf()
        # (Line 63) displaytext.printfAt(9,"\x13Loading, please wait{:s}{:s}{:s} ",
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 64) GetTBLAddr(dot[0]) ,
    # (Line 65) GetTBLAddr(dot[1]),
    # (Line 66) GetTBLAddr(dot[2])
    # (Line 67) );
    displaytext.printfAt(9, "\x13Loading, please wait{:s}{:s}{:s} ", GetTBLAddr(dot[0]), GetTBLAddr(dot[1]), GetTBLAddr(dot[2]))
    # (Line 68) displaytext.printfAt(10,"\x13({}%) ", percent);
    displaytext.printfAt(10, "\x13({}%) ", percent)
    # (Line 69) }
