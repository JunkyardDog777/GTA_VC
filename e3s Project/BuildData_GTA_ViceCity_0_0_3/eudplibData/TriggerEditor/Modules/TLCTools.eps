import PluginVariables as msqcvar;
import TriggerEditor.TETools as tt;
import Modules.GTAintro;

const baseX=256;

var movementLoop;

const civX = [6544,6896,7024,6928,6576,6448,6416,7056,7216,
			  6992,6896,6736,6576,];
const civY = [1520,1040,912  ,1520,1040,912  ,1520,1520,1712,
			  1712,1712,1712,1744,];
			
					//left    right up    down
const moveOptX =	  [6416,6928,6576,6576,
					   6576,7024,7024,6928,
					   6448,6896,6896,7056,
					   6544,7056,6896,6896,
					   6448,6896,6448,6544,
					   6576,7024,6576,6416,
					   6288,6544,6448,6288,
					   6928,7216,7024,7216,
					   6992,7216,7056,7216,
					   6896,7216,7056,6992,
					   6736,6992,6928,6896,
					   6576,6896,6576,6736,
					   6384,6736,6544,6576,
					   ];
const moveOptY =	  [1520,1520,1040,1744,
					   1040,912  ,912  ,1520,
					   912  ,1040,1040,1520,
					   1520,1520,1040,1712,
					   912  ,1040,912  ,1520,
					   1040,912  ,1040,1520,
					   1520,1520,912  ,1520,
					   1520,1712,912  ,1712,
					   1712,2512,1520,2512,
					   1712,1712,1520,1968,
					   1712,1712,1520,1968,
					   1744,1712,1744,1936,
					   1760,1712,1520,1936,
					   ];

const buildingID =     [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,];
const buildingX =       [0,6624,4240,4320,3520,5728,6928,3952,5616,4352,2752,2080,4672,6784,6752,4000,3552,3888,4656,7088,6480,6128,5136,6128,6224,6000,6096,5872,3984,3792,3888,];
const buildingY =       [0,1456,1248,976  ,2736,6576,2176,4704,5824,1936,4752,6096,1936,3056,4720,4976,5520,800  ,2400,896  ,2368,3040,4736,5440,6144,6944,2784,5952,4160,5408,6368,];
const buildingExitX = [0,6624,4240,4320,3520,5728,6928,3952,5616,4352,2752,2160,4672,6784,6752,4000,3552,3888,4656,7088,6480,6128,5136,6128,6224,6000,6096,5872,3984,3792,3888,];
const buildingExitY = [0,1520,1200,1040,2800,6640,2224,4656,5872,2000,4816,6096,2000,3120,4784,5040,5584,848  ,2448,944  ,2416,3088,4688,5488,6096,6992,2736,5904,4208,5360,6416,];
const buildingType =  [0,1,2,1,1,1,2,2,2,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,];//0 none, 1 ammonation, 2 hospital, 3 fire station, 4 police, 5 safehouse, 6 paint shop
const buildingUnit =   [0,111,112,111,111,111,112,112,112,113,113,113,106,106,106,106,106,125,125,125,125,125,125,125,125,125,109,109,109,109,109,];
const buildingColor = [0,1,5,7,3,6,0,2,4,1,5,7,3,6,0,2,4,1,5,7,3,6,0,2,4,1,5,7,3,6,0,];

const carX = [0];
const carY = [0];
const carMoveX = [0];
const carMoveY = [0];

const loadedInteriors = [0,0,0,0,0,0];
const playerCurrentBuild = [0,0,0,0,0,0];

function calculateDistance(x1, y1, x2, y2) {
	const dx = x2 - x1;
	const dy = y2 - y1;
	return dx*dx + dy*dy;
}

function forceSelect(player,ptr){
	setcurpl(player);
	dwwrite(0x6284B8,ptr);
	dwwrite(0x6284E8 + 48 * player,ptr);
	dwwrite(0x597208,ptr);
	dwwrite(0x59723C,1);
}

function checkInterior(buildingID){
	var firstEmpty = 999;
	for(var i=0;i<loadedInteriors.length;i++){
		if(loadedInteriors[i] == buildingID){
			return i;
		}
		if(loadedInteriors[i]==0 && firstEmpty==999){
			firstEmpty = i;
		}
	}
	return firstEmpty;
}

function clearInterior(interior){
	for(var i=0;i<loadedInteriors.length;i++){
		if(loadedInteriors[i] == interior){
			loadedInteriors[i] = 0;
			setloc(198,256,3232+(768*i),256+1568,3232+(768*i)+704);
			RemoveUnitAt(All,229,198,AllPlayers);
			break;
		}
	}
}

function randNum(maxNumber){
	return rand() * (maxNumber+1) / 65536;
}

function runAI(){
	if(!getgametick()%12){
		if(movementLoop==civX.length){
			movementLoop=0;
		}
		if(GTAintro.civSpawned[movementLoop]>0){
			setloc(190,civX[movementLoop]-16,civY[movementLoop]-16,civX[movementLoop]+16,civY[movementLoop]+16);
			const randomDirection=randNum(3);
			setloc(191,moveOptX[(movementLoop*4)+randomDirection],moveOptY[(movementLoop*4)+randomDirection]);
			Order(15,6,190,Move,191);
		}
		movementLoop++;
	}
}

function spawnInterior(workingSlot,buildingID,player){
	const baseY = 3232+(768*workingSlot);
	const buildingType = buildingType[buildingID];

	switch (buildingType) {
		case 1: // ammonation
			const units =   [206,206,205,205,206,206,205,205,  16,];//keep the door as the last unit
			const unitsX = [720,608,480,368,392,504,600,712,552,];
			const unitsY = [264,208,208,264,328,384,384,328,376,];
			
			for(var i = 0;i<units.length;i++){
				setloc(196, baseX+unitsX[i],baseY+unitsY[i]);
				if(units[i]==16){
					const nextUnit = CUnit.from_read(EPD(0x628438));
					CreateUnit(1,16,196,6);//exit door
					if (!Memory(0x628438, Exactly, nextUnit.ptr)) {
						GTAintro.aiLoop.add(nextUnit);
					}
				} else if(units[i]!=16) {
					CreateUnit(1,units[i],196,6);
				}
				if(i==units.length-1){
					setloc(196, baseX+unitsX[units.length-1],baseY+unitsY[units.length-1]-16);
					MoveUnit(1,GTAintro.playerUID[player],player,player+8,196);
					playerCurrentBuild[player]=buildingID;
				}
			}
			break;
			
		case 2: //hospital
			break;
	}
	loadedInteriors[workingSlot]=buildingID;
}

function loadInterior(buildingID,player){
	const workingSlot = checkInterior(buildingID);
	
	switch (buildingID) {
		case 1,3,4,5://ammonation
			if(loadedInteriors[workingSlot] == buildingID){
				MoveUnit(1,GTAintro.playerUID[player],player,player+8,196);
			} else {
				spawnInterior(workingSlot,buildingID,player);
			}
			break;
			
		case 2,6,7,8://hospital
			if(loadedInteriors[workingSlot] == buildingID){
				MoveUnit(1,GTAintro.playerUID[player],player,player+8,196);
			} else {
				const nextUnit = CUnit.from_read(EPD(0x628438));
				CreateUnit(1,16,196,6);//exit door
				if (!Memory(0x628438, Exactly, nextUnit.ptr)) {
					GTAintro.aiLoop.add(nextUnit);
				}
				MoveUnit(1,GTAintro.playerUID[player],player,player+8,196);
				loadedInteriors[workingSlot]=buildingID;
			}
			break;
	}
}

function leaveInterior(player){
	const inInterior = playerCurrentBuild[player];

	setloc(197,buildingExitX[inInterior],buildingExitY[inInterior]);
	MoveUnit(1,GTAintro.playerUID[player],player,player+8,197);
	playerCurrentBuild[player] = 0;
	var playersLeft = 0;
	for(var i = 0;i<playerCurrentBuild.length;i++){
		if(playerCurrentBuild[i]==inInterior){
			playersLeft++;
			break;
		}
	}
	if(playersLeft==0){
		clearInterior(inInterior);
	}
}