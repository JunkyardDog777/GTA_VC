import PluginVariables as msqcvar;
import Modules.GTAintro;

const 		 Bag = UnitGroup(1000 );
const ChangeableUnits = EUDDeque(1000)();
var boxcount;

const array = [
    64, 98, 99, 107, 99, 117, 82, 79, 81, 79, 81, 90, 81, 99, 81, 109,
    81, 114, 82, 94, 82, 110, 117, 81, 116, 84, 116, 99, 117, 97, 117, 109,
    116, 110, 152, 78, 150, 79, 150, 92, 152, 92, 152, 107, 150, 107, 168, 91,
    168, 98, 168, 107, 187, 82, 185, 83, 185, 95, 187, 95, 187, 107, 185, 107,
    203, 91, 203, 97, 92, 152, 92, 156, 127, 149, 127, 160, 127, 169, 177, 140,
    177, 148, 177, 154, 177, 164, 177, 170, 211, 138, 211, 152, 213, 152, 230, 152,
    230, 156, 144, 139, 144, 147, 144, 154, 144, 163, 144, 167, 110, 138, 109, 143,
    110, 151, 109, 159, 110, 164, 102, 188, 100, 190, 100, 202, 102, 203, 102, 216,
    100, 216, 135, 189, 136, 202, 138, 203, 135, 203, 135, 216, 137, 216, 138, 216,
    118, 189, 118, 196, 118, 206, 155, 203, 155, 207, 173, 189, 172, 191, 173, 203,
    172, 204, 172, 215, 173, 215, 190, 201, 190, 207, 89, 135, 95, 135, 134, 135,
    148, 135, 162, 135, 176, 135, 190, 135, 204, 135, 215, 135, 209, 175, 202, 175,
    202, 187, 209, 187, 239, 99, 28, 100, 28, 69, 212, 27, 228, 42, 255, 131,
    59, 38, 91, 38, 123, 38, 155, 38, 183, 38, 51, 128, 55, 142, 46, 170,
    46, 192, 215, 173, 215, 193, 228, 97, 228, 65, 255, 163, 234, 173, 73, 223,
    105, 223, 137, 223, 168, 223, 200, 223, 154, 142, 89, 128, 91, 128, 93, 128,
    95, 128, 97, 128, 99, 128, 101, 128, 155, 124, 155, 125, 155, 126, 155, 127,
    155, 128, 155, 141, 155, 142, 155, 143, 155, 144, 157, 141, 159, 141, 160, 141,
    162, 141, 163, 141, 164, 141, 166, 141, 167, 141, 168, 141, 154, 145, 154, 144,
    151, 178, 153, 178, 155, 178, 156, 178, 158, 178, 159, 178, 160, 178, 162, 178,
    164, 178, 208, 152, 209, 154, 210, 155, 211, 156, 212, 157, 210, 156, 209, 157,
    240, 155, 239, 156, 237, 156, 236, 157, 239, 157, 134, 204, 135, 205, 136, 206,
    137, 206, 128, 204, 127, 205, 126, 206, 125, 207, 166, 203, 165, 204, 164, 205,
    163, 206, 163, 207, 168, 204, 169, 205, 170, 206, 171, 207, 97, 205, 99, 206,
    98, 206, 78, 192, 78, 193, 78, 194, 78, 195, 78, 176, 78, 177, 78, 178,
    77, 178, 76, 178, 75, 178, 74, 178, 73, 178, 72, 178, 70, 178, 69, 178,
    68, 178, 67, 178, 66, 178, 65, 178, 64, 178, 63, 178, 66, 179, 64, 180,
    64, 181, 63, 182, 63, 180, 97, 206, 96, 207, 95, 207, 93, 66, 93, 67,
    93, 68, 93, 69, 128, 83, 127, 84, 128, 85, 127, 86, 127, 66, 127, 67,
    127, 68, 127, 69, 125, 69, 123, 69, 122, 69, 120, 69, 119, 69, 117, 69,
    115, 69, 114, 69, 116, 70, 114, 71, 113, 72, 113, 70, 58, 99, 56, 99,
    54, 99, 52, 99, 50, 99, 49, 99, 59, 99, 48, 99, 47, 99, 46, 99,
    45, 99, 46, 98, 45, 97, 74, 108, 73, 109, 73, 110, 72, 110, 71, 111,
    70, 112, 69, 112, 68, 112, 69, 114, 70, 114, 68, 113, 67, 114, 155, 144,
    192, 125, 190, 125, 193, 125, 195, 125, 197, 125, 199, 125, 200, 125, 202, 125,
    188, 125, 203, 125, 227, 128, 228, 128, 230, 128, 231, 128, 232, 128, 234, 128,
    235, 128, 236, 128, 238, 128, 208, 113, 208, 114, 173, 115, 174, 114, 175, 113,
    175, 112, 170, 115, 169, 114, 167, 113, 169, 113, 172, 113, 172, 112, 170, 112,
    140, 115, 141, 114, 142, 113, 140, 113, 138, 113, 135, 113, 134, 113, 136, 113,
    137, 114, 143, 112, 113, 96, 114, 97, 116, 98, 118, 99, 114, 99, 117, 99,
    115, 99, 113, 98, 182, 95, 183, 96, 184, 97, 185, 98, 182, 97, 180, 98,
    74, 112, 73, 111, 115, 54, 114, 55, 113, 56, 113, 55, 111, 55, 110, 55,
    109, 54, 108, 54, 106, 54, 108, 55, 109, 57, 143, 55, 142, 55, 141, 54,
    163, 55, 164, 55, 176, 54, 177, 55, 178, 56, 178, 57, 185, 54, 184, 54,
    183, 55, 182, 56, 182, 55, 181, 55, 179, 55, 180, 57, 179, 54, 94, 109,
    96, 110, 98, 111, 100, 112, 102, 112, 57, 179, 36, 70, 131, 230, 167, 230,
    206, 182,
    
      // SS(507) coordinates
  70,165, 75,165, 83,165, 88,165, 149,165, 161,165, 93,165, 98,165, 101,165, 
  107,165, 112,165, 117,165, 123,165, 128,165, 134,165, 139,165, 144,165, 
  155,165, 166,165, 170,165, 176,165, 181,165, 184,165, 188,165,
  
  // SS(412) coordinates
  158,151, 157,151, 157,151,
  
  // SS(901) coordinates
  57,180, 132,229, 167,230, 201,180, 203,228, 205,126, 167,127, 134,127, 40,71,
  
  // SS(233) coordinates
  94,165, 93,164, 92,163, 132,165, 133,165, 133,164, 132,165, 133,165, 133,164,
  132,164, 171,163, 170,164, 168,164, 173,163, 211,114, 211,113, 211,112,
  113,95, 115,96, 117,98, 118,98, 112,99, 115,99, 117,99, 112,99, 115,99,
  117,99, 119,99, 116,98, 115,98, 113,99, 113,97, 113,96, 115,96, 119,97,
  134,113, 136,115, 135,114, 104,111, 103,111, 102,111, 101,111, 100,111,
  99,111, 99,111, 98,111, 97,111, 96,111, 95,111, 97,110, 95,109, 95,109,
  102,113, 101,113, 100,113, 99,113, 97,113, 96,113, 95,113, 94,113, 93,113,
  92,113, 91,113, 90,113, 89,113, 88,113, 87,113, 86,113, 86,113, 86,112,
  87,112, 88,112, 89,112, 91,112, 92,112, 94,112, 73,156, 71,154, 101,156,
  103,155, 142,156, 141,155, 140,153, 170,154, 169,156, 171,154, 170,155,
  169,156, 167,156, 140,154, 142,156, 140,156, 139,154, 139,155, 139,156,
  103,155, 102,156, 100,156, 98,156, 73,156, 72,155, 102,151, 102,152,
  102,153, 102,153, 102,152, 102,153, 102,153, 100,154, 103,149, 162,54,
  163,54, 178,55, 177,54, 179,57, 184,54, 183,55, 182,57, 184,54, 183,54,
  183,55, 180,54, 186,54, 182,95, 182,97,
  
  // SS(828) coordinates
  211,135, 213,152, 211,136, 212,157, 110,136, 110,168, 127,171, 127,164,
  127,150, 144,139, 177,140, 102,220, 101,209, 101,200, 101,194, 101,187,
  101,185, 118,187, 118,188, 118,194, 118,187, 118,188, 118,194, 118,198,
  118,205, 137,203, 137,214, 172,218, 172,209, 190,207, 190,201, 64,90,
  64,90, 64,90, 65,97, 64,97, 169,90, 168,109, 185,98, 186,85, 186,79,
  186,77, 186,111, 135,188, 99,107, 151,111, 151,97, 150,78, 150,84,
  150,93, 149,114,
  
  
  
  
  // SS(414) coordinates
  	110,40, 110,40, 111,40, 110,40, 111,40,
  	
  	 55,66, 68,66, 86,66, 100,66 ,
     119,67, 130,67, 139,67, 156,67 ,
     169,68, 204,54, 188,65, 207,77 ,
     205,90, 190,87, 171,88, 151,86 ,
     132,87, 115,87, 53,104, 74,112 ,
     101,106, 124,112, 93,125, 74,136 ,
     82,148, 101,146, 115,127, 122,149 ,
     137,130, 145,149, 166,149, 151,121 ,
     159,126, 193,121, 179,122, 181,143 ,
     202,128, 221,123, 232,125, 174,165 ,
     197,182, 176,182, 177,200, 191,200 ,
     155,197, 153,174, 136,169, 135,193 ,
     119,168, 119,186, 138,209, 112,204 ,
     100,192, 101,171, 80,171, 67,175 ,
    67,197, 85,192, 86,201 , 
    52,85,74,89,94,89,229,146,211,147,192,165
    
];
const Cx,Cy = getlocTL(7);
var d;


function DrawGTA(){



//init
once{wwrite(0x66EC48 +828 * 4,  223);wwrite(0x666160 + 515 * 2,  828); }
if(d<=1302){d+=2;}

	if(d==170){wwrite(0x66EC48 +877 * 4,  223); wwrite(0x669E28 + 877 * 1, 0); wwrite(0x666160 + 515 * 2,  877); }
	if(d ==196){wwrite(0x66EC48 +875 * 4,  223); wwrite(0x669E28 + 875 * 1, 0);wwrite(0x666160 + 515 * 2,  875);  }
	if(d ==248){wwrite(0x66EC48 +233 * 4,  223); wwrite(0x669E28 + 233 * 1, 10);wwrite(0x666160 + 515 * 2,  233);  }
	
	//if(d ==658 ){wwrite(0x66EC48 +507 * 4,  223); wwrite(0x669E28 + 507 * 1, 10);wwrite(0x666160 + 515 * 2,  507); bwrite(0x6605F0 + 96 * 1,   64 );}
	if(d ==728){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);   }

	//if(d ==710){wwrite(0x66EC48 +412 * 4,  223); wwrite(0x669E28 + 412 * 1, 10);wwrite(0x666160 + 515 * 2,  412); bwrite(0x6605F0 + 96 * 1,   0 );  }
	if(d ==738){wwrite(0x66EC48 +507 * 4,  223); wwrite(0x669E28 + 507 * 1, 10);wwrite(0x666160 + 515 * 2,  507); SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 8, 0xFF);}
	//if(d ==728){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);}
	if(d ==786){wwrite(0x66EC48 +412 * 4,  223); wwrite(0x669E28 + 412 * 1, 10);wwrite(0x666160 + 515 * 2,  412); SetMemoryXEPD(EPD(0x6605F0 + 96 * 1), 7, 0, 0xFF);}
	if(d==792){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);}
	if(d ==810){wwrite(0x66EC48 +233 * 4,  223); wwrite(0x669E28 + 233 * 1, 10);wwrite(0x666160 + 515 * 2,  233);   }
	if(d==1060){wwrite(0x66EC48 +828 * 4,  223); wwrite(0x669E28 + 828 * 1, 10);wwrite(0x666160 + 515 * 2,  828); }
	if(d ==1162){wwrite(0x66EC48 +414 * 4,  223); wwrite(0x669E28 + 414 * 1, 10); wwrite(0x666160 + 515 * 2,  414); }
	if(d ==1172){wwrite(0x66EC48 +503 * 4,  223);  wwrite(0x666160 + 515 * 2,  503); wwrite(0x66D4D8 + 503 * 1,  0);}
// 
//	
//	if(d==596){wwrite(0x66EC48 +901 * 4,  223); wwrite(0x669E28 + 901 * 1, 0);wwrite(0x666160 + 515 * 2,  901);  }
if(d<1302){	setloc(20,200+ array[d],200+ array[d+1]);	CreateUnit(1,96,20,7);}
	foreach(unit: EUDLoopNewCUnit ()){

	if(unit.unknown0x86<1 && unit.unitType==96){ 	
	unit.remove_collision();
	boxcount+=2;
	unit.unknown0x8C =boxcount;
	unit.unknown0x86=1;}

	if(unit.unknown0x86 ){
	
	Bag.add(unit); 
	}
		} 

   foreach(BagE: Bag.cploop) {
        foreach(dead: BagE.dying) {}	// Existence check: living units continue to execute code, dead units continue
        BagE.move_cp(0x64/4);
        if(DeathsX(CurrentPlayer, Exactly, $U("Zerg Larva"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Egg"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Drone"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Hydralisk"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Lurker Egg"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Mutalisk"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Mutalisk Cocoon"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Hatchery"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Lair"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Creep Colony"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Zerg Spire"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Protoss High Templar"), 0, 0xFFFF)
        || DeathsX(CurrentPlayer, Exactly, $U("Protoss Dark Templar (Unit)"), 0, 0xFFFF)
        ) {
            const uid = wread_cp(0, 0);
            ChangeableUnits.append(uid);
            ChangeableUnits.append(BagE.epd);
        }
        // start
         const Bagg = CUnit(BagE.epd);


		if( Bagg.unknown0x86==0){ Bagg.unknown0x86=1; }
		if( Bagg.unknown0x86==1 ){Bagg.unknown0x86=2;   } 
		
		Bagg.order= 6; 
		Bagg.movementState= 13;
	
			if(Bagg.unknown0x8C==Bagg.unknown0x8C){
				Bagg.posX = (GTAintro.camX-135)+array[Bagg.unknown0x8C]; 
				Bagg.posY = (GTAintro.camY-125)+  array[Bagg.unknown0x8C+1]; 
			}    
	


        // end
           if(boxcount==999){  BagE.remove(); }	//This code is necessary!!!Don't skip it
    }


return(d); 




}

























