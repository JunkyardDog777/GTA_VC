## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import TriggerEditor.TETools as tt;
from TriggerEditor import TETools as tt
# (Line 3) import Modules.TLCTools;
from Modules import TLCTools
# (Line 5) var sceneTimer;
sceneTimer = EUDVariable()
# (Line 6) var movieStarted;
movieStarted = EUDVariable()
# (Line 7) var movieOver;
movieOver = EUDVariable()
# (Line 8) var screenBrightness = 310;
screenBrightness = _TYGV([None], lambda: [310])
# (Line 9) var introOver;
introOver = EUDVariable()
# (Line 10) var camX;
camX = EUDVariable()
# (Line 11) var camY;
camY = EUDVariable()
# (Line 12) var camXmod;
camXmod = EUDVariable()
# (Line 13) var camYmod;
camYmod = EUDVariable()
# (Line 14) var worldHour = 16;
worldHour = _TYGV([None], lambda: [16])
# (Line 15) var worldMin = 20;
worldMin = _TYGV([None], lambda: [20])
# (Line 16) var worldMonth = 4;
worldMonth = _TYGV([None], lambda: [4])
# (Line 17) var worldDay = 20;
worldDay = _TYGV([None], lambda: [20])
# (Line 18) var worldYear = 2024;
worldYear = _TYGV([None], lambda: [2024])
# (Line 19) var worldBrightness = 31;
worldBrightness = _TYGV([None], lambda: [31])
# (Line 20) const daysOfMonth = [0,31,28,31,30,31,30,31,31,30,31,30,31];
daysOfMonth = _CGFW(lambda: [_ARR(FlattenList([0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]))], 1)[0]
# (Line 21) const unitLoop=UnitGroup(12);
unitLoop = _CGFW(lambda: [UnitGroup(12)], 1)[0]
# (Line 22) const aiLoop=UnitGroup(128);
aiLoop = _CGFW(lambda: [UnitGroup(128)], 1)[0]
# (Line 23) const buttonTimer=[0,0,0,0,0,0,	0,0,0,0,0,0,	0,0,0,0,0,0,	0,0,0,0,0,0,	0,0,0,0,0,0,	0,0,0,0,0,0,	0,0,0,0,0,0];//offset player*6
buttonTimer = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 24) const playerHeat = [0,0,0,0,0,0];
playerHeat = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 25) const playerMoney = [100,100,100,100,100,100];
playerMoney = _CGFW(lambda: [_ARR(FlattenList([100, 100, 100, 100, 100, 100]))], 1)[0]
# (Line 26) const playerEPD = [0,0,0,0,0,0];
playerEPD = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 27) const playerCar = [0,0,0,0,0,0];
playerCar = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 28) const playerUID = [0,1,2,3,7,8];
playerUID = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 7, 8]))], 1)[0]
# (Line 29) const playerWep = [0,0,0,0,0,0];
playerWep = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 30) const civSpawned = EUDArray(TLCTools.civX.length);
civSpawned = _CGFW(lambda: [EUDArray(TLCTools.civX.length)], 1)[0]
# (Line 31) const buildingSpawned = EUDArray(TLCTools.buildingX.length);
buildingSpawned = _CGFW(lambda: [EUDArray(TLCTools.buildingX.length)], 1)[0]
# (Line 35) function beforeTriggerExec(){
@EUDFunc
def beforeTriggerExec():
    # (Line 36) once{
    _t1 = EUDExecuteOnce()
    if _t1():
        # (Line 40) addloc(7,0,0);
        f_addloc(7, 0, 0)
        # (Line 41) foreach(player : EUDLoopPlayer()) {
        for player in EUDLoopPlayer():
            # (Line 42) CreateUnit(1,47,7,player);
            # (Line 43) setcurpl(player);
            DoActions(CreateUnit(1, 47, 7, player))
            f_setcurpl(player)
            # (Line 46) }
            # (Line 47) }

        # (Line 49) if(!introOver){
    EUDEndExecuteOnce()
    if EUDIf()(introOver, neg=True):
        # (Line 50) sceneTimer++;
        sceneTimer.__iadd__(1)
        # (Line 51) foreach(player : EUDLoopPlayer()) {
        for player in EUDLoopPlayer():
            # (Line 52) if(MemoryEPD(EPD(msqcvar.VKeyDown_F) + player, Exactly, 1)){
            if EUDIf()(MemoryEPD(EPD(msqcvar.VKeyDown_F) + player, Exactly, 1)):
                # (Line 53) movieOver=1;
                movieOver << (1)
                # (Line 54) }
                # (Line 55) }
            EUDEndIf()
            # (Line 56) switch (sceneTimer){

        EUDSwitch(sceneTimer)
        # (Line 57) case 55:
        _t4 = EUDSwitchCase()
        # (Line 59) camX = 7000;
        if _t4(55):
            camX << (7000)
            # (Line 60) camY = 1100;
            camY << (1100)
            # (Line 62) camXmod = -2;
            camXmod << (-2)
            # (Line 63) camYmod = 4;
            camYmod << (4)
            # (Line 64) movieStarted=1;
            movieStarted << (1)
            # (Line 65) break;
            EUDBreak()
            # (Line 67) case 195:
        _t5 = EUDSwitchCase()
        # (Line 69) camX = 7500;
        if _t5(195):
            camX << (7500)
            # (Line 70) camY = 7500;
            camY << (7500)
            # (Line 72) camXmod = -6;
            camXmod << (-6)
            # (Line 73) camYmod = -1;
            camYmod << (-1)
            # (Line 74) break;
            EUDBreak()
            # (Line 76) case 335:
        _t6 = EUDSwitchCase()
        # (Line 78) camX = 2600;
        if _t6(335):
            camX << (2600)
            # (Line 79) camY = 6300;
            camY << (6300)
            # (Line 81) camXmod = 0;
            camXmod << (0)
            # (Line 82) camYmod = -4;
            camYmod << (-4)
            # (Line 83) break;
            EUDBreak()
            # (Line 85) case 475:
        _t7 = EUDSwitchCase()
        # (Line 87) camX = 4444;
        if _t7(475):
            camX << (4444)
            # (Line 88) camY = 4675;
            camY << (4675)
            # (Line 90) camXmod = 8;
            camXmod << (8)
            # (Line 91) camYmod = 0;
            camYmod << (0)
            # (Line 92) break;
            EUDBreak()
            # (Line 94) case 615:
        _t8 = EUDSwitchCase()
        # (Line 96) camX = 4350;
        if _t8(615):
            camX << (4350)
            # (Line 97) camY = 1825;
            camY << (1825)
            # (Line 99) camXmod = -2;
            camXmod << (-2)
            # (Line 100) camYmod = 4;
            camYmod << (4)
            # (Line 101) break;
            EUDBreak()
            # (Line 103) case 755:
        _t9 = EUDSwitchCase()
        # (Line 105) camX = 4000;
        if _t9(755):
            camX << (4000)
            # (Line 106) camY = 6500;
            camY << (6500)
            # (Line 108) camXmod = -4;
            camXmod << (-4)
            # (Line 109) camYmod = -4;
            camYmod << (-4)
            # (Line 110) break;
            EUDBreak()
            # (Line 112) case 895:
        _t10 = EUDSwitchCase()
        # (Line 114) camX = 6150;
        if _t10(895):
            camX << (6150)
            # (Line 115) camY = 5750;
            camY << (5750)
            # (Line 117) camXmod = 4;
            camXmod << (4)
            # (Line 118) camYmod = -4;
            camYmod << (-4)
            # (Line 119) break;
            EUDBreak()
            # (Line 121) case 1035:
        _t11 = EUDSwitchCase()
        # (Line 123) camX = 2500;
        if _t11(1035):
            camX << (2500)
            # (Line 124) camY = 4600;
            camY << (4600)
            # (Line 126) camXmod = 0;
            camXmod << (0)
            # (Line 127) camYmod = 4;
            camYmod << (4)
            # (Line 128) break;
            EUDBreak()
            # (Line 130) case 1175:
        _t12 = EUDSwitchCase()
        # (Line 132) camX = 6350;
        if _t12(1175):
            camX << (6350)
            # (Line 133) camY = 1100;
            camY << (1100)
            # (Line 135) camXmod = -4;
            camXmod << (-4)
            # (Line 136) camYmod = 4;
            camYmod << (4)
            # (Line 137) break;
            EUDBreak()
            # (Line 139) case 1315:
        _t13 = EUDSwitchCase()
        # (Line 141) camX = 7500;
        if _t13(1315):
            camX << (7500)
            # (Line 142) camY = 2000;
            camY << (2000)
            # (Line 144) camXmod = -4;
            camXmod << (-4)
            # (Line 145) camYmod = 1;
            camYmod << (1)
            # (Line 146) break;
            EUDBreak()
            # (Line 148) case 1455:
        _t14 = EUDSwitchCase()
        # (Line 150) camX = 3650;
        if _t14(1455):
            camX << (3650)
            # (Line 151) camY = 4500;
            camY << (4500)
            # (Line 153) camXmod = 1;
            camXmod << (1)
            # (Line 154) camYmod = -2;
            camYmod << (-2)
            # (Line 155) break;
            EUDBreak()
            # (Line 157) case 1595:
        _t15 = EUDSwitchCase()
        # (Line 159) camX = 2750;
        if _t15(1595):
            camX << (2750)
            # (Line 160) camY = 750;
            camY << (750)
            # (Line 162) camXmod = 3;
            camXmod << (3)
            # (Line 163) camYmod = 0;
            camYmod << (0)
            # (Line 164) break;
            EUDBreak()
            # (Line 166) case 1735:
        _t16 = EUDSwitchCase()
        # (Line 168) camX = 3650;
        if _t16(1735):
            camX << (3650)
            # (Line 169) camY = 1500;
            camY << (1500)
            # (Line 171) camXmod = 1;
            camXmod << (1)
            # (Line 172) camYmod = 3;
            camYmod << (3)
            # (Line 173) break;
            EUDBreak()
            # (Line 175) case 1875:
        _t17 = EUDSwitchCase()
        # (Line 177) camX = 2400;
        if _t17(1875):
            camX << (2400)
            # (Line 178) camY = 3800;
            camY << (3800)
            # (Line 180) camXmod = 4;
            camXmod << (4)
            # (Line 181) camYmod = -1;
            camYmod << (-1)
            # (Line 182) break;
            EUDBreak()
            # (Line 184) case 2015:
        _t18 = EUDSwitchCase()
        # (Line 186) camX = 2275;
        if _t18(2015):
            camX << (2275)
            # (Line 187) camY = 7000;
            camY << (7000)
            # (Line 189) camXmod = 3;
            camXmod << (3)
            # (Line 190) camYmod = -3;
            camYmod << (-3)
            # (Line 191) break;
            EUDBreak()
            # (Line 193) case 2155:
        _t19 = EUDSwitchCase()
        # (Line 195) camX = 7350;
        if _t19(2155):
            camX << (7350)
            # (Line 196) camY = 7100;
            camY << (7100)
            # (Line 198) camXmod = -1;
            camXmod << (-1)
            # (Line 199) camYmod = -3;
            camYmod << (-3)
            # (Line 200) break;
            EUDBreak()
            # (Line 202) case 2275:
        _t20 = EUDSwitchCase()
        # (Line 204) camX = 1300;
        if _t20(2275):
            camX << (1300)
            # (Line 205) camY = 500;
            camY << (500)
            # (Line 207) camXmod = 0;
            camXmod << (0)
            # (Line 208) camYmod = 4;
            camYmod << (4)
            # (Line 209) break;
            EUDBreak()
            # (Line 211) case 2637:
        _t21 = EUDSwitchCase()
        # (Line 212) camXmod = 0;
        if _t21(2637):
            camXmod << (0)
            # (Line 213) camYmod = 0;
            camYmod << (0)
            # (Line 214) movieOver = 1;
            movieOver << (1)
            # (Line 215) break;
            EUDBreak()
            # (Line 216) }
        # (Line 217) if(movieStarted){
        EUDEndSwitch()
        if EUDIf()(movieStarted):
            # (Line 218) camX+=camXmod;
            camX.__iadd__(camXmod)
            # (Line 219) camY+=camYmod;
            camY.__iadd__(camYmod)
            # (Line 220) setloc(7,camX,camY);
            f_setloc(7, camX, camY)
            # (Line 221) MoveUnit(All,47,AllPlayers,64,7);
            # (Line 222) eprintAll("Press F to skip intro");
            DoActions(MoveUnit(All, 47, AllPlayers, 64, 7))
            f_eprintAll("Press F to skip intro")
            # (Line 223) foreach(player : EUDLoopPlayer()){
            for player in EUDLoopPlayer():
                # (Line 224) setcurpl(player);
                f_setcurpl(player)
                # (Line 225) CenterView(7);
                # (Line 226) }
                DoActions(CenterView(7))
                # (Line 227) }

            # (Line 228) if(movieOver){
        EUDEndIf()
        if EUDIf()(movieOver):
            # (Line 229) bwrite(0x657A9C,screenBrightness/10);
            f_bwrite(0x657A9C, screenBrightness // 10)
            # (Line 230) eprintAll("");
            f_eprintAll("")
            # (Line 231) if(screenBrightness>3){
            if EUDIf()(screenBrightness <= 3, neg=True):
                # (Line 232) screenBrightness-=4;
                screenBrightness.__isub__(4)
                # (Line 233) }else {
            if EUDElse()():
                # (Line 234) screenBrightness=0;
                screenBrightness << (0)
                # (Line 235) }
                # (Line 236) if(!screenBrightness){
            EUDEndIf()
            if EUDIf()(screenBrightness, neg=True):
                # (Line 237) introOver = 1;
                introOver << (1)
                # (Line 238) RemoveUnit(47,AllPlayers);
                # (Line 240) }
                DoActions(RemoveUnit(47, AllPlayers))
                # (Line 241) }
            EUDEndIf()
            # (Line 242) }
        EUDEndIf()
        # (Line 251) }
    EUDEndIf()
